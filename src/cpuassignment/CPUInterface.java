//Daniel Rossano
/* Note: everything here except the code inside the button events
was generated automatically by NetBeans */
package cpuassignment;
import javax.swing.SwingUtilities;
import javax.swing.table.*; 



public class CPUInterface extends javax.swing.JFrame 
{
    
    
static CPUAssignment processDeterminator = new CPUAssignment();


//data for the table
Object[][] tableFace = {};
String[] columnName = {"Process", "Burst Time", "Wait Time", "Turnaround Time"};



    public CPUInterface() 
    {
        initComponents();
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        customProcessButton = new javax.swing.JButton();
        randomProcessButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        algorithmSelection = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        processOrdering = new javax.swing.JTable();
        removeProcess = new javax.swing.JButton();
        sortProcesses = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputAverages = new javax.swing.JTextArea();
        removeData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COM310 CPU Assignment by Daniel Rossano");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        customProcessButton.setText("Create custom process");
        customProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customProcessButtonActionPerformed(evt);
            }
        });

        randomProcessButton.setText("Create Random Process");
        randomProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomProcessButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Select algorithm:");

        algorithmSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "First Come First Serve", "Shortest Job First" }));

        processOrdering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process", "Burst Time", "Wait Time", "Turnaround Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        processOrdering.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(processOrdering);

        removeProcess.setText("Remove Last Process");
        removeProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProcessActionPerformed(evt);
            }
        });

        sortProcesses.setText("Sort Processes by Selected Algorithm");
        sortProcesses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortProcessesActionPerformed(evt);
            }
        });

        outputAverages.setColumns(20);
        outputAverages.setRows(5);
        jScrollPane2.setViewportView(outputAverages);

        removeData.setText("Remove All Data");
        removeData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(customProcessButton)
                                .addGap(18, 18, 18)
                                .addComponent(randomProcessButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(250, 250, 250)))
                        .addGap(367, 367, 367))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(sortProcesses)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(algorithmSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(removeProcess)
                        .addGap(49, 49, 49)
                        .addComponent(exitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(removeData)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(algorithmSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customProcessButton)
                    .addComponent(randomProcessButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortProcesses)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exitButton)
                    .addComponent(removeProcess))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeData))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //when exit button is pressed:
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    

    //when a random process is created
    private void randomProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomProcessButtonActionPerformed

        Object[] p = new Object[4];
        p = processDeterminator.randomProcess(p);

        
        
        //now that we have a new process, we must add it to the table
        //to add a new process to the table we start by cloning the last table
      Object[][] tempData = new Object[tableFace.length+1][4];
        
        for (int i = 0; i<tableFace.length;i++)
        {
            tempData[i] = tableFace[i];
        }
        //next add the new process to the new table
        tempData[tempData.length - 1] = p;
        tableFace = tempData;
        //now make a new model for the tabel to account for the new process
       processOrdering.setModel(
               new AbstractTableModel()
       {
           public int getRowCount() {
       return tableFace.length;
       }
           
           public int getColumnCount(){
               return 4;
           }
           
           public String getColumnName(int column)
           {
               return columnName[column];
           }
           
           public Object getValueAt(int i, int i1)
           {
               return tableFace[i][i1];
           }
       }
       );
       //lastly, recreate the table with the new model
      ((AbstractTableModel)(processOrdering.getModel())).fireTableDataChanged();
        
      //if any averages were output, get rid of them as they are now inaccurate
      if(outputAverages.getText().equalsIgnoreCase("") == false)
      {
 outputAverages.setText("One or more processes have been added."
         + "\nThe previous averages are now inaccurate."
         + "\nRun the algorithm again to see the new averages.");
      }
        
        
    }//GEN-LAST:event_randomProcessButtonActionPerformed
    //when the user wants to create their own process
    private void customProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customProcessButtonActionPerformed
       
        //in order to add the process to a table, we will need it to be stored
        //in a variable within this class
        Object[] p = new Object[4];
        p = processDeterminator.customProcess(p);
        
        if (p != null)
        {
        //now that we have a process, we must add it to the table
        //to add a process to the table we start by cloning the last table
        Object[][] tempData = new Object[tableFace.length+1][4];
        
        for (int i = 0; i<tableFace.length;i++)
        {
            tempData[i] = tableFace[i];
        }
        //next add the new process to the new table
        tempData[tempData.length - 1] = p;
        tableFace = tempData;
        
        //now make a new model for the table to account for the new process
       processOrdering.setModel(
               new AbstractTableModel()
               {
           public int getRowCount() {
       return tableFace.length;
       }
           
           public int getColumnCount(){
               return 4;
           }
           
           public String getColumnName(int column)
           {
               return columnName[column];
           }
           
           public Object getValueAt(int i, int i1)
           {
               return tableFace[i][i1];
           }
       }
       );
       //lastly, recreate the tabel with the new model
      ((AbstractTableModel)(processOrdering.getModel())).fireTableDataChanged();
        }
        
      //if any averages were output, get rid of them as they are now inaccurate
      if(outputAverages.getText().equalsIgnoreCase("") == false)
      {
 outputAverages.setText("One or more processes have been added."
         + "\nThe previous averages are now inaccurate."
         + "\nRun the algorithm again to see the new averages.");
      }
       
    }//GEN-LAST:event_customProcessButtonActionPerformed
//to remove the process most recently created
    private void removeProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProcessActionPerformed
    //if there is actually something in the table for us to remove
        if (tableFace.length >= 1)
        {
            //remove the data     
      tableFace[tableFace.length - 1] = 
            processDeterminator.removeProcess(tableFace[tableFace.length - 1]);
            
            
            
     //make a new table and store copies of everything from the old table in it
        Object[][] tempData = new Object[tableFace.length-1][4];
        
        for (int i = 0; i<tableFace.length - 1;i++)
        {
            tempData[i] = tableFace[i];
        }
        
        tableFace = tempData;
        //now set the old table to this new table
       processOrdering.setModel(
               new AbstractTableModel()
               {
           public int getRowCount() {
       return tableFace.length;
       }
           
           public int getColumnCount(){
               return 4;
           }
           
           public String getColumnName(int column)
           {
               return columnName[column];
           }
           
           public Object getValueAt(int i, int i1)
           {
               return tableFace[i][i1];
           }
       }
       );
       //lastly, recreate the table with the new model
      ((AbstractTableModel)(processOrdering.getModel())).fireTableDataChanged();
        }
        
      //if any averages were output, get rid of them as they are now inaccurate
      if(outputAverages.getText().equalsIgnoreCase("") == false)
      {
 outputAverages.setText("One or more processes have been removed."
         + "\nThe previous averages are now inaccurate."
         + "\nRun the algorithm again to see the new averages.");
      }
        
        
    }//GEN-LAST:event_removeProcessActionPerformed

    private void sortProcessesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortProcessesActionPerformed
     
     if (algorithmSelection.getSelectedItem().equals("First Come First Serve"))
     {
       tableFace = processDeterminator.firstComeFirstServe(tableFace);
     }
     
     if (algorithmSelection.getSelectedItem().equals("Shortest Job First"))
     {
         tableFace = processDeterminator.shortestJobFirst(tableFace);
     }
           
           processOrdering.setModel(new AbstractTableModel()
           {
              public int getRowCount() {
                  return tableFace.length;
              }
              
              public int getColumnCount(){
                  return 4;
              }
              
              public String getColumnName(int column)
              {
                  return columnName[column];
              }
              
              public Object getValueAt(int i, int i1)
              {
                  return tableFace[i][i1];
              }
           }
           );
    ((AbstractTableModel) (processOrdering.getModel())).fireTableDataChanged();
    //if there is something in the table
    if(tableFace.length >= 1) 
    {
    //then we must output the average wait and turnaround times
    Double avgWait = 0.0;
    avgWait = processDeterminator.getAvgWait(avgWait);
    Double avgTurn = 0.0;
    avgTurn = processDeterminator.getAvgTurn(avgTurn);
    
    outputAverages.setText("Average Wait Time: " + avgWait + " ms" 
            + "\nAverage Turnaround Time: " + avgTurn + " ms");
    }
    

    }//GEN-LAST:event_sortProcessesActionPerformed

    private void removeDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDataActionPerformed
   //this button will, unsurpringly, clear all proccesses, averages and charts
   if (tableFace.length >= 1)
   {
       //remove all data from the table
       for (int i = 0; i<tableFace.length; i++)
        {
            tableFace[i] = processDeterminator.removeProcess(tableFace[i]);
        }
       //restart the table with a "blank slate"
   Object[][] tempData = new Object[0][4];
   
   tableFace = tempData;
    processOrdering.setModel(new AbstractTableModel()
        {
            public int getRowCount() 
            {
            return tableFace.length;
            }   
    
            public int getColumnCount() 
            {
            return 4;
            }
    
            public String getColumnName(int column) 
            {
            return columnName[column];
            }
        
            public Object getValueAt(int i, int i1)
            {
            return tableFace[i][i1];
            }
        }
      );
    ((AbstractTableModel) (processOrdering.getModel())).fireTableDataChanged();
   }
   
   //if there was any output text, remove it
   if (outputAverages.getText().equalsIgnoreCase("") == false)
   {
       outputAverages.setText("");
   }
    }//GEN-LAST:event_removeDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CPUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CPUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CPUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CPUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CPUInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algorithmSelection;
    private javax.swing.JButton customProcessButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea outputAverages;
    private javax.swing.JTable processOrdering;
    private javax.swing.JButton randomProcessButton;
    private javax.swing.JButton removeData;
    private javax.swing.JButton removeProcess;
    private javax.swing.JButton sortProcesses;
    // End of variables declaration//GEN-END:variables
}

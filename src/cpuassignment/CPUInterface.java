//Daniel Rossano
/* Note: everything here except the code inside the button events
was generated automatically by NetBeans */
package cpuassignment;
import javax.swing.table.*;

public class CPUInterface extends javax.swing.JFrame 
{
    
    
static CPUAssignment processDeterminator = new CPUAssignment();


//data for the table
Object[][] tableFace = {};
String[] columnName = {"Process", "Burst Time", "Order", "Arrival Time"};


    public CPUInterface() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        customProcessButton = new javax.swing.JButton();
        randomProcessButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        processOrdering = new javax.swing.JTable();
        removeProcess = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COM310 CPU Assignment by Daniel Rossano");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        customProcessButton.setText("Create custom process");
        customProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customProcessButtonActionPerformed(evt);
            }
        });

        randomProcessButton.setText("Create Random Process");
        randomProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomProcessButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Select algorithm:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Shortest Job First" }));

        processOrdering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process", "Burst Time", "Order", "Arrival Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        processOrdering.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(processOrdering);

        removeProcess.setText("Remove Most Recent Process");
        removeProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProcessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeProcess)
                        .addGap(27, 27, 27)
                        .addComponent(exitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(customProcessButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(randomProcessButton)
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(211, 211, 211)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(180, 180, 180)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(338, 338, 338))
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customProcessButton)
                    .addComponent(randomProcessButton))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(removeProcess))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //when exit button is pressed:
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    

    //when a random process is created
    private void randomProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomProcessButtonActionPerformed

        Object[] p = new Object[4];
        p = processDeterminator.randomProcess(p);

        
        
        //now that we have a new process, we must add it to the table
        //to add a new process to the table we start by cloning the last table
      Object[][] tempData = new Object[tableFace.length+1][4];
        
        for (int i = 0; i<tableFace.length;i++)
        {
            tempData[i] = tableFace[i];
        }
        //next add the new process to the new table
        tempData[tempData.length - 1] = p;
        tableFace = tempData;
        //now make a new model for the tabel to account for the new process
       processOrdering.setModel(
               new AbstractTableModel()
       {
           public int getRowCount() {
       return tableFace.length;
       }
           
           public int getColumnCount(){
               return 4;
           }
           
           public String getColumnName(int column)
           {
               return columnName[column];
           }
           
           public Object getValueAt(int i, int i1)
           {
               return tableFace[i][i1];
           }
       }
       );
       //lastly, recreate the table with the new model
       ((AbstractTableModel)(processOrdering.getModel())).fireTableDataChanged();
        
        
        System.out.println("Process number is " + p[0]);
        System.out.println("Burst time is " + p[1]);
        System.out.println("Order is " + p[2]);
        System.out.println("Arrival time is " + p[3]);
        
        
    }//GEN-LAST:event_randomProcessButtonActionPerformed
    //when the user wants to create their own process
    private void customProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customProcessButtonActionPerformed
       
        //in order to add the process to a table, we will need it to be stored
        //in a variable within this class
        Object[] p = new Object[4];
        p = processDeterminator.customProcess(p);
        
        if (p != null)
        {
        //now that we have a process, we must add it to the table
        //to add a process to the table we start by cloning the last table
        Object[][] tempData = new Object[tableFace.length+1][4];
        
        for (int i = 0; i<tableFace.length;i++)
        {
            tempData[i] = tableFace[i];
        }
        //next add the new process to the new table
        tempData[tempData.length - 1] = p;
        tableFace = tempData;
        
        //now make a new model for the table to account for the new process
       processOrdering.setModel(
               new AbstractTableModel()
               {
           public int getRowCount() {
       return tableFace.length;
       }
           
           public int getColumnCount(){
               return 4;
           }
           
           public String getColumnName(int column)
           {
               return columnName[column];
           }
           
           public Object getValueAt(int i, int i1)
           {
               return tableFace[i][i1];
           }
       }
       );
       //lastly, recreate the tabel with the new model
      ((AbstractTableModel)(processOrdering.getModel())).fireTableDataChanged();
        }
     if (p != null)   
     {
        System.out.println("Process: " + p[0]);
        System.out.println("Burst time is " + p[1]);
        System.out.println("Order is " + p[2]);
        System.out.println("Arrival time is " + p[3]);
     }
       
    }//GEN-LAST:event_customProcessButtonActionPerformed
//to remove the process most recently created
    private void removeProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProcessActionPerformed
    //if there is actually something in the table for us to remove
        if (tableFace.length >= 1)
        {
            //actually remove the data
            //if there is more than one process in the table
            if (tableFace.length > 1)
            {
            processDeterminator.removeProcess(tableFace[tableFace.length - 2],
                    tableFace[tableFace.length - 1]);
            }
            //if there is only one process in the table
            else
        processDeterminator.removeProcess(null,tableFace[tableFace.length - 1]);
            
            
            
     //make a new table and store copies of everything from the old table in it
        Object[][] tempData = new Object[tableFace.length-1][4];
        
        for (int i = 0; i<tableFace.length - 1;i++)
        {
            tempData[i] = tableFace[i];
        }
        
        tableFace = tempData;
        //now set the old table to this new table
       processOrdering.setModel(
               new AbstractTableModel()
               {
           public int getRowCount() {
       return tableFace.length;
       }
           
           public int getColumnCount(){
               return 4;
           }
           
           public String getColumnName(int column)
           {
               return columnName[column];
           }
           
           public Object getValueAt(int i, int i1)
           {
               return tableFace[i][i1];
           }
       }
       );
       //lastly, recreate the table with the new model
      ((AbstractTableModel)(processOrdering.getModel())).fireTableDataChanged();
        }
        
        
        
        
    }//GEN-LAST:event_removeProcessActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CPUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CPUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CPUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CPUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CPUInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton customProcessButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable processOrdering;
    private javax.swing.JButton randomProcessButton;
    private javax.swing.JButton removeProcess;
    // End of variables declaration//GEN-END:variables
}
